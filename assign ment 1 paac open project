{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "toc_visible": true,
      "gpuType": "T4",
      "authorship_tag": "ABX9TyNU5Ep0bquIoHDfRnYjt3SQ",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/23117129/PYTORCH/blob/main/assign%20ment%201%20paac%20open%20project\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "metadata": {
        "id": "OcR2fkKeaufZ"
      },
      "outputs": [],
      "source": [
        "import torch\n",
        "import torch.nn as nn\n",
        "import torch.optim as optim\n",
        "import numpy as np\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "# XOR dataset\n",
        "X = torch.tensor([[0, 0], [0, 1], [1, 0], [1, 1]], dtype=torch.float32)\n",
        "y = torch.tensor([[0], [1], [1], [0]], dtype=torch.float32)\n",
        "\n",
        "\n",
        "# Define the model\n",
        "class SimpleNN(nn.Module):\n",
        "     def __init__(self):\n",
        "      super(SimpleNN , self).__init__()\n",
        "      self.fc1 = nn.Linear(2 ,4)\n",
        "      self.fc2 = nn.Linear(4 ,1)\n",
        "\n",
        "\n",
        "     def forward(self, x):\n",
        "        x = torch.relu(self.fc1(x))  # Apply ReLU activation after the first layer\n",
        "        x = torch.sigmoid(self.fc2(x))  # Apply Sigmoid activation after the second layer\n",
        "        return x\n",
        "\n",
        "torch.manual_seed(0) # by using this reproducibility of loss not occur\n",
        "\n",
        "model = SimpleNN()\n",
        "\n",
        "criterion = nn.BCELoss()\n",
        "optimizer = optim.Adam(model.parameters() , lr=.001)\n",
        "\n",
        "\n",
        "# Train the model\n",
        "for epoch in range(5000):\n",
        "    '''Type you code here'''\n",
        "    optimizer.zero_grad() # it removes error  occur due addition pf previous grdients\n",
        "    outputs = model(X)\n",
        "    Loss = criterion(outputs , y)\n",
        "    Loss.backward()\n",
        "    optimizer.step()\n",
        "\n",
        "    if (epoch + 1) % 500 == 0:  # Print loss every 500 epochs\n",
        "        print(f'Epoch [{epoch+1}/5000], Loss: {Loss.item():.4f}')\n",
        "\n",
        "# Evaluate the model\n",
        "with torch.no_grad():\n",
        "    predictions = model(X)\n",
        "    predictions = predictions.round()\n",
        "    accuracy = (predictions == y).float().mean()\n",
        "    print(f'Model Accuracy: {accuracy.item() * 100:.4f}%')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ognjPJXibCSN",
        "outputId": "30fd73b1-d434-4bdd-ac18-352cd573f414"
      },
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch [500/5000], Loss: 0.4997\n",
            "Epoch [1000/5000], Loss: 0.2822\n",
            "Epoch [1500/5000], Loss: 0.1541\n",
            "Epoch [2000/5000], Loss: 0.0878\n",
            "Epoch [2500/5000], Loss: 0.0531\n",
            "Epoch [3000/5000], Loss: 0.0339\n",
            "Epoch [3500/5000], Loss: 0.0226\n",
            "Epoch [4000/5000], Loss: 0.0156\n",
            "Epoch [4500/5000], Loss: 0.0111\n",
            "Epoch [5000/5000], Loss: 0.0080\n",
            "Model Accuracy: 100.0000%\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import torch\n",
        "import torch.nn as nn\n",
        "import torch.optim as optim\n",
        "\n",
        "# XOR dataset\n",
        "X = torch.tensor([[0, 0], [0, 1], [1, 0], [1, 1]], dtype=torch.float32)\n",
        "y = torch.tensor([[0], [1], [1], [0]], dtype=torch.float32)\n",
        "\n",
        "# Define the model\n",
        "class SimpleNN(nn.Module):\n",
        "    def __init__(self):\n",
        "        super(SimpleNN, self).__init__()\n",
        "        self.fc1 = nn.Linear(2, 4)  # 2 input features, 4 neurons in the hidden layer\n",
        "        self.fc2 = nn.Linear(4, 1)  # 4 neurons in the hidden layer, 1 output\n",
        "\n",
        "    def forward(self, x):\n",
        "        x = torch.relu(self.fc1(x))  # Apply ReLU activation after the first layer\n",
        "        x = torch.sigmoid(self.fc2(x))  # Apply Sigmoid activation after the second layer\n",
        "        return x\n",
        "\n",
        "torch.manual_seed(90)\n",
        "\n",
        "\n",
        "model = SimpleNN()\n",
        "\n",
        "# Loss and optimizer\n",
        "criterion = nn.BCELoss()  # Binary Cross-Entropy Loss\n",
        "optimizer = optim.SGD(model.parameters(), lr=0.1)  # Stochastic Gradient Descent with a learning rate of 0.1\n",
        "\n",
        "# Training loop\n",
        "for epoch in range(5000):\n",
        "    optimizer.zero_grad()  # Clear gradients\n",
        "    outputs = model(X)  # Forward pass\n",
        "    loss = criterion(outputs, y)  # Compute loss\n",
        "    loss.backward()  # Backward pass (compute gradients)\n",
        "    optimizer.step()  # Update parameters\n",
        "\n",
        "    if (epoch + 1) % 500 == 0:\n",
        "        print(f'Epoch [{epoch+1}/5000], Loss: {loss.item():.4f}')\n",
        "\n",
        "# Evaluate the model\n",
        "with torch.no_grad():\n",
        "    predictions = model(X).round()  # Round predictions to 0 or 1\n",
        "    accuracy = (predictions == y).float().mean()  # Calculate accuracy\n",
        "    print(f'Model Accuracy: {accuracy.item() * 100:.2f}%')\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7aGnOYKqTBRB",
        "outputId": "fa9dba19-e046-4c64-868b-c3bf5703465f"
      },
      "execution_count": 37,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch [500/5000], Loss: 0.1789\n",
            "Epoch [1000/5000], Loss: 0.0445\n",
            "Epoch [1500/5000], Loss: 0.0224\n",
            "Epoch [2000/5000], Loss: 0.0145\n",
            "Epoch [2500/5000], Loss: 0.0105\n",
            "Epoch [3000/5000], Loss: 0.0082\n",
            "Epoch [3500/5000], Loss: 0.0067\n",
            "Epoch [4000/5000], Loss: 0.0057\n",
            "Epoch [4500/5000], Loss: 0.0049\n",
            "Epoch [5000/5000], Loss: 0.0043\n",
            "Model Accuracy: 100.00%\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "losses = []\n",
        "\n",
        "# Train the model and record the loss\n",
        "for epoch in range(5000):\n",
        "    '''Type your code here'''\n",
        "    optimizer.zero_grad() # it removes error  occur due addition pf previous grdients\n",
        "    outputs = model(X)\n",
        "    Loss = criterion(outputs , y)\n",
        "    Loss.backward()\n",
        "    optimizer.step()\n",
        "    losses.append(Loss.item())\n",
        "\n",
        "\n",
        "\n",
        "plt.plot(range(epoch + 1), losses)\n",
        "plt.xlabel('Epoch')\n",
        "plt.ylabel('Loss')\n",
        "plt.title('Loss Over Epochs')\n",
        "plt.show()\n",
        "\n",
        "\n",
        "\n",
        "# Plot the loss over epochs"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "id": "dCPo2-fOXe7T",
        "outputId": "b9919d33-e9e2-4de6-c027-1ae3dcd8b0e5"
      },
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    }
  ]
}